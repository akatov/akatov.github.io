#+TITLE: Writing Ruby C Extensions
#+DATE: <2015-07-16>
#+DRAFT: t
#+OPTIONS: toc:nil num:nil
#+OPTIONS: ^:nil

This post is inspired by Writing Ruby C Extensions
[[http://tenderlovemaking.com/2009/12/18/writing-ruby-c-extensions-part-1.html][Part
1]] and
[[http://tenderlovemaking.com/2010/12/11/writing-ruby-c-extensions-part-2.html][Part
2]] by [[http://tenderlovemaking.com/][Tenderlove Making]], and uses
[[http://postmodern.github.io/2012/05/20/you-dont-have-to-use-bundler-to-create-new-rubygems.html][ore]]
as a project generator.

** Aim
:PROPERTIES:
:CUSTOM_ID: aim
:END:
create a ruby gem called stree wrapping the C library libstree used to
compute Suffix

** Prerequisites
:PROPERTIES:
:CUSTOM_ID: prerequisites
:END:
Install ore.

#+begin_example
$ gem isntall ZenTest ore
#+end_example

** Create Project
:PROPERTIES:
:CUSTOM_ID: create-project
:END:
#+begin_example
$ mine stree --bundler --gemspec --mini-test --yard --markdown --name=stree --version=0.0.0
$ cd stree
#+end_example

** Write First Test
:PROPERTIES:
:CUSTOM_ID: write-first-test
:END:
Before writing the first test we need to fix the generated files to work
with the latest gems. We can now run

#+begin_example
$ bundle exec autotest
#+end_example

Since I like reading spec style tests (=describe= and =it= blocks),
let's convert the existing test.

Now, let's add a first real test.

{% highlight ruby %} # test/test_stree.rb describe Stree do it 'should
return "hello world"' do _(Stree.hello_world).must_equal 'hello world'
end end {% endhighlight %}

The test fails with a =NoMethodError= since =hello_world= is not defined
for =Stree=. We will now implement this method in C.

** C Extension Project Layout
:PROPERTIES:
:CUSTOM_ID: c-extension-project-layout
:END:
It is customary to put C code in =ext/<project-name>/=. Hence

#+begin_example
$ mkdir -p ext/$(basename $(pwd))
#+end_example

** extconf.rb
:PROPERTIES:
:CUSTOM_ID: extconf.rb
:END:
Inside the above directory we put an =extconf.rb= which will generate a
=Makefile= which in turn can be used to build the C code.

{% highlight ruby %} # ext/stree/extconf.rb require 'mkmf'
create_makefile 'stree' {% endhighlight %}

You can test =extconf.rb= by running =ruby ext/stree/extconf.rb= which
should create a =Makefile=. Running =make= gives "make: Nothing to be
done for `all'." since we don't have a C source file yet.

** stree.c
:PROPERTIES:
:CUSTOM_ID: stree.c
:END:
{% highlight c %} #include <ruby.h>

static VALUE hello_world(VALUE self) { return rb_str_new2("hello
world"); }

void Init_stree() { VALUE mStree = rb_define_module("Stree");
rb_define_singleton_method(mStree, "hello_world", hello_world, 0); } {%
endhighlight %}

Now re-running =ruby ext/stree/extconf.rb= and =make= creates =stree.o=
and =stree.bundle= (on OSX).

** Automating the build
:PROPERTIES:
:CUSTOM_ID: automating-the-build
:END:
We obviously want to automate this task. For this we can use the
=rake-compiler= gem.

{% highlight ruby %} # Rakefile require 'rake/extensiontask'
Rake::ExtensionTask.new 'stree' {% endhighlight %}

Now we can run

#+begin_example
$ bundle exec rake compile
#+end_example

which produces =lib/stree.bundle=
